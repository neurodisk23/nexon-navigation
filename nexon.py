import numpy as np
from novatel_oem7_msgs.msg import BESTPOS
from novatel_oem7_msgs.msg import BESTVEL
from novatel_oem7_msgs.msg import INSPVA
import rospy
from std_msgs.msg import String
import actuator
import math
import pid
import time

lat = 0
lng = 0
heading = 0
wp_threshold = 1.111395e5
#GNSS position
def callback_latlong(data):
    global lat,lng
    lat = data.lat
    lng = data.lon

#GNSS heading
def callback_heading(data):

    global heading
    heading=data.azimuth  
rospy.init_node('Navigation', anonymous=True)
#ROS subscription
rospy.Subscriber("/novatel/oem7/bestpos",BESTPOS, callback_latlong)
rospy.Subscriber("/novatel/oem7/inspva",INSPVA, callback_heading)

#TCP connection
obj = actuator.controller("169.254.178.227",5001)
obj.connect()

#PID controller
Kp = 1.65971
Ki = 0.00007
Kd = 0.710
rate_min = -100
rate_max = 100
pid_controller = pid.PIDController(Kp, Ki, Kd, rate_min, rate_max)

def calculate_steer_angle(currentLocation, wp, heading):
    """
    This function takes three inputs:
        - currentLocation: a list of two float values representing the current location
        - wp: a waypoint value
        - heading: a heading value
    It then calculates the steer output based on the current location, waypoint, and heading, and returns the steer output value.
    """
    off_y = - currentLocation[0] + waypoints[wp][0]
    off_x = - currentLocation[1] + waypoints[wp][1]

    # calculate bearing based on position error
    bearing_ppc = 90.00 + math.atan2(-off_y, off_x) * 57.2957795 

    # convert negative bearings to positive by adding 360 degrees
    if bearing_ppc < 0:
        bearing_ppc += 360.00

    # calculate the difference between heading and bearing
    bearing_diff = heading - bearing_ppc

    # normalize bearing difference to range between -180 and 180 degrees
    if bearing_diff < -180:
        bearing_diff = bearing_diff + 360

    if bearing_diff > 180:
        bearing_diff = bearing_diff - 360

    steer_output = 750 * np.arctan(-1 * 2 * 3.5 * np.sin(np.pi * bearing_diff / 180) / 8)
    
    return steer_output

#Load waypoints
def load_waypoints(file_path):
        data_list = []
        try:
            with open(file_path, "r") as file:
                lines = file.readlines()
                for line in lines:
                    # Split each line using a comma as delimiter and convert values to floats
                    values = [float(x.strip()) for x in line.strip().split()]
                    data_list.append(values)
        except FileNotFoundError:
            print("File not found.")
        except Exception as e:
            print(f"Error occurred: {e}")
        return data_list



#file_path = 'output.txt'
#waypoints = load_waypoints(file_path)
waypoints = [[17.6013373147834,78.12661300583218],
[17.601338060697504,78.12661297770535],
[17.60133959539467,78.12661293117918],
[17.601340385613383,78.12661289344386],
[17.60134201259344,78.12661285889565],
[17.601342862429508,78.12661281348576],
[17.60134457469309,78.1266127691302],
[17.601345444978957,78.12661273545926],
[17.60134633942072,78.12661271803059],
[17.601348152684995,78.12661271833632],
[17.601350019287104,78.12661266592112],
[17.60135097592858,78.12661263071944],
[17.601352894469642,78.12661258369076],
[17.601353864829154,78.1266125656379],
[17.601355840935202,78.12661251393449],
[17.601356847369676,78.12661249060832],
[17.601358866806,78.1266124444216],
[17.601359909809684,78.12661241381271],
[17.601361972423124,78.12661237765819],
[17.60136302583959,78.1266123376206],
[17.601365160745647,78.1266122943292],
[17.601366239512668,78.12661228482112],
[17.601368384633588,78.12661224451942],
[17.60136949780991,78.12661220906324],
[17.60137168554624,78.12661215372013],
[17.601372779150715,78.12661212895183],
[17.601375005077607,78.12661210338436],
[17.60137612207384,78.12661207912194],
[17.601378426203894,78.12661202108785],
[17.601379559688187,78.12661203794397],
[17.601381827735658,78.12661196940086],
[17.60138296214266,78.1266119418628],
[17.601385279546154,78.12661191201093],
[17.60138643461579,78.12661186458156],
[17.60138876032425,78.12661179997272],
[17.60138993171634,78.1266117717785],
[17.60139238593083,78.12661170281608],
[17.601393676678256,78.12661166070308],
[17.60139643632406,78.12661157956757],
[17.601397906062086,78.12661155646421],
[17.60140102286973,78.12661145531216],
[17.601402648385434,78.12661141633858],
[17.60140603628703,78.12661130410599],
[17.6014077493679,78.12661125813688],
[17.6014112790535,78.12661115780737],
[17.60141306096065,78.1266111196576],
[17.601416666382157,78.12661099544106],
[17.601418491037595,78.12661093298635],
[17.601422272211064,78.12661088145093],
[17.60142418399444,78.1266108484409],
[17.60142814221378,78.12661074615781],
[17.601430170809504,78.12661074099377],
[17.60143434907079,78.12661068812143],
[17.60143653047699,78.12661066923322],
[17.60144099920894,78.12661058734025],
[17.601443343124917,78.12661053255015],
[17.60144809432451,78.12661048497607],
[17.601450505135396,78.12661048928982],
[17.60145549528362,78.1266105566136],
[17.601458116565247,78.12661061209869],
[17.60146332771406,78.12661055871365],
[17.601465968763325,78.12661048099912],
[17.601471450925708,78.12661041457828],
[17.601474289166127,78.12661047311869],
[17.601480098096616,78.12661053572815],
[17.601483037139015,78.12661051738108],
[17.601489055045555,78.12661043026846],
[17.60149210743807,78.12661038541582],
[17.601498379495606,78.12661040247022],
[17.601501569930548,78.12661040372016],
[17.60150807787963,78.12661036052963],
[17.601511399474404,78.12661031219241],
[17.601518141203897,78.12661023608123],
[17.601521562714773,78.12661024449598],
[17.601528512316527,78.12661025848992],
[17.60153204540234,78.12661023940193],
[17.601539135241943,78.12661028993861],
[17.601542715459235,78.1266102685868],
[17.601549907469895,78.12661026382098],
[17.601553512620516,78.12661028588097],
[17.601560737631175,78.12661030912025],
[17.60156434864627,78.12661030500047],
[17.60157148308108,78.12661031560033],
[17.601575023048643,78.1266102903575],
[17.601582071587757,78.12661033137627],
[17.601585639789167,78.12661031901403],
[17.601592831480335,78.12661027311368],
[17.601596488451925,78.1266102481915],
[17.601603813216244,78.12661025705917],
[17.60160755862821,78.12661018975966],
[17.60161503195909,78.12661015860466],
[17.601618787627057,78.12661017097858],
[17.60162634127957,78.12661019285959],
[17.601633940396514,78.12661009116715],
[17.601637748940156,78.12661004372046],
[17.601645474045597,78.12660994841161],
[17.601649337722684,78.1266099089525],
[17.601657122936267,78.12660977874074],
[17.60166106639646,78.1266096984127],
[17.601668929605907,78.12660961156077],
[17.60167295100235,78.12660956602814],
[17.601676989392914,78.12660951401827],
[17.60168514399604,78.12660943759018],
[17.6016933961722,78.12660934362374],
[17.60169755873382,78.1266092963903],
[17.601705992034336,78.12660925700935],
[17.601710245628755,78.12660923585233],
[17.601718839344272,78.12660914320698],
[17.60172316660687,78.12660909989252],
[17.601731932281464,78.12660907111257],
[17.601736343959217,78.12660903104138],
[17.6017451879306,78.12660893103948],
[17.60174966399677,78.12660886954578],
[17.601758648056684,78.12660875507268],
[17.601763165081962,78.12660868120439],
[17.60177232364136,78.12660852759959],
[17.60177692177175,78.1266084669614],
[17.601786159207013,78.12660839221532],
[17.601790816951283,78.12660835700233],
[17.601800157979433,78.12660825656899],
[17.601804891734247,78.12660820003602],
[17.601809628445846,78.12660813659694],
[17.601819087310755,78.12660798737366],
[17.601828702663482,78.12660791848839],
[17.60183355119269,78.12660787467442],
[17.601843229772832,78.12660788939465],
[17.601848080874458,78.12660785560378],
[17.601857872509004,78.12660767363836],
[17.601862762505935,78.12660763126883],
[17.601872561203713,78.12660751111319],
[17.60187745025979,78.12660736171884],
[17.601887255161152,78.12660713103828],
[17.60189216528631,78.12660707473535],
[17.60190200149305,78.12660695554588],
[17.60190693106988,78.12660683821824],
[17.601916856357914,78.12660664095553],
[17.60192182147606,78.12660657107556],
[17.60193179703019,78.12660640785889],
[17.601936786857536,78.12660628972813],
[17.601946784435505,78.12660605854205],
[17.601951789578067,78.12660592824078],
[17.60196184293383,78.12660561043512],
[17.601966873080826,78.12660548384568],
[17.601976936600234,78.12660520947496],
[17.6019819694301,78.12660505160441],
[17.6019920633108,78.12660474831631],
[17.601997137613406,78.12660463440612],
[17.60200728075399,78.12660441118906],
[17.6020123533573,78.12660428688432],
[17.602022483746865,78.1266040279073],
[17.602027600203208,78.1266039443405],
[17.602037749681433,78.12660372261767],
[17.602042823133193,78.12660361072176],
[17.60205303948419,78.12660346634999],
[17.602058165162862,78.12660344553223],
[17.602068463110236,78.12660330102932],
[17.60207362866662,78.12660330926906],
[17.602083979835008,78.12660331962344],
[17.602089141150326,78.12660336829119],
[17.60209947531551,78.12660342600518],
[17.602104687309016,78.12660345752498],
[17.602115119122423,78.12660357136751],
[17.602120325053185,78.12660355930458],
[17.602130734560912,78.12660356459489],
[17.602135947690332,78.12660353012483],
[17.602146421457505,78.12660344653926],
[17.602151683120706,78.12660341481315],
[17.602162202067337,78.12660338329862],
[17.60216754613002,78.1266033317981],
[17.60217806224222,78.12660322995411],
[17.602183333034965,78.12660319658653],
[17.60219373820304,78.12660297227404],
[17.602199029673724,78.12660290931977],
[17.602209583449653,78.12660284014548],
[17.60221488597256,78.1266027906796],
[17.602225445472616,78.12660270028705],
[17.602230734924746,78.12660262149298],
[17.602241390580566,78.12660241386024],
[17.602246715518596,78.12660234977605],
[17.60225737033521,78.12660223685586],
[17.60226268164352,78.12660231506537],
[17.60227333228832,78.12660215358423],
[17.602278686172617,78.12660208094854],
[17.60228941372723,78.12660196145015],
[17.602294769700713,78.12660193566947],
[17.602305513814887,78.12660188223947],
[17.602310874418013,78.12660179034646],
[17.60232159528825,78.1266016696311],
[17.60232696176249,78.12660163225218],
[17.602337709592895,78.12660152315613],
[17.602343082878328,78.1266014851794],
[17.602353763042146,78.12660140259112],
[17.602359117582303,78.1266013707608],
[17.602369767656974,78.126601319648],
[17.602375092606867,78.12660129489038],
[17.6023856837123,78.12660120204757],
[17.602390925800055,78.12660117792694],
[17.602401268735797,78.1266011319921],
[17.60240635665496,78.12660111142607],
[17.602416333733917,78.12660106722832],
[17.602421228526914,78.1266010355942],
[17.60243081652253,78.12660103359461],
[17.602435511199612,78.12660102690766],
[17.602444752930914,78.12660097143481],
[17.602449339793864,78.12660094834644],
[17.602458533776442,78.12660088464517],
[17.602463178171565,78.12660086930966],
[17.602472605030815,78.12660081450345],
[17.60247740491126,78.12660076418864],
[17.602487127820392,78.12660073649401],
[17.602492049508378,78.12660073048829],
[17.60250186177319,78.12660071085632]]
wp = 0
message = "A,N,0,0,0,0,0,0,0,0,0\r\n" 
obj.send_data(message)
feed = obj.receive_data()
print(feed)
message = "A,N,0,1,100,0,0,0,0,0,0\r\n"
obj.send_data(message)
time.sleep(1)
feed = obj.receive_data()
print(feed)
message = "A,D,0,0,0,0,0,0,0,0,0 \r\n"
obj.send_data(message)
feed = obj.receive_data()
print(feed)
while not rospy.is_shutdown():
    try:
        print("waypoint index =============== ",wp)
        position = [float(lat), float(lng)]
        print("Current position = ", position)
        if ((np.linalg.norm(np.array(position) - waypoints[len(waypoints) - 1]) * wp_threshold) > 1):
            steer_angle = calculate_steer_angle(position, wp, heading)
            print("Steer Angle: ",steer_angle)
            steering_feedback = obj.receive_data().split(',')[2]
            print("steer Feedback: ",steering_feedback)
            steer_rate = pid_controller.update(steer_angle, float(steering_feedback))
            print("Steer Rate: ",steer_rate)
            obj.send_data("A,D,6,0,0,1,"+str(steer_rate)+",0,0,0,0\r\n")
            #time.sleep(1)
            if (wp < len(waypoints) and ((np.linalg.norm(np.array(position) - waypoints[wp]) * wp_threshold) < 6)):
                wp = wp + 1
        else:
            steer_angle = 0
            obj.send_data('A,N,0,1,100,0,0,0,0,0,0\r\r')
            time.sleep(1)
        
        
    except rospy.ROSInterruptException:
        pass