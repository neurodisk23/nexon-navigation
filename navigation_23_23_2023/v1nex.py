import numpy as np
from geopy.distance import geodesic
from novatel_oem7_msgs.msg import BESTPOS
from novatel_oem7_msgs.msg import BESTVEL
from novatel_oem7_msgs.msg import INSPVA
import rospy
from std_msgs.msg import String
import actuator
import math
import pid
import time
import math


def calculate_vector(wp1, wp2):
    return [wp2[0] - wp1[0], wp2[1] - wp1[1]]

def normalize_vector(vector):
    #print("\n Waypoint vector : ", vector)
    magnitude = math.sqrt(vector[0]**2 + vector[1]**2)
    return [vector[0] / magnitude, vector[1] / magnitude]

def calculate_perpendicular(vector):
    return [-vector[1], vector[0]]

def shift_waypoint(waypoint, perpendicular, distance_meters):
    # Convert latitude and longitude from degrees to meters
    lat_meters = distance_meters / 111000
    lon_meters = distance_meters / (111000 * math.cos(math.radians(waypoint[0])))

    # Calculate the shift
    shifted = [waypoint[0] + lat_meters * perpendicular[0], waypoint[1] + lon_meters * perpendicular[1]]
    return shifted

lat = 0
lng = 0
heading = 0
wp_threshold = 1.111395e5
#GNSS position
def callback_latlong(data):
    global lat,lng
    lat = data.lat
    lng = data.lon

#GNSS heading
def callback_heading(data):

    global heading
    heading=data.azimuth  
rospy.init_node('Navigation', anonymous=True)
#ROS subscription
rospy.Subscriber("/novatel/oem7/bestpos",BESTPOS, callback_latlong)
rospy.Subscriber("/novatel/oem7/inspva",INSPVA, callback_heading)

#TCP connection
obj = actuator.controller("169.254.178.227",5001)
obj.connect()

#PID controller
Kp = 1.65971
Ki = 0.00007
Kd = 0.710
rate_min = -100
rate_max = 100
pid_controller = pid.PIDController(Kp, Ki, Kd, rate_min, rate_max)

def calculate_steer_angle(currentLocation, wp, heading):
    
    
    """
    This function takes three inputs:
        - currentLocation: a list of two float values representing the current location
        - wp: a waypoint value
        - heading: a heading value
    It then calculates the steer output based on the current location, waypoint, and heading, and returns the steer output value.
    """
    print("current location", currentLocation[0])
    off_y = - currentLocation[0] + float(shifted_waypoints[wp][0])
    off_x = - currentLocation[1] + float(shifted_waypoints[wp][1])

    # calculate bearing based on position error
    bearing_ppc = 90.00 + math.atan2(-off_y, off_x) * 57.2957795 

    # convert negative bearings to positive by adding 360 degrees
    if bearing_ppc < 0:
        bearing_ppc += 360.00

    # calculate the difference between heading and bearing
    bearing_diff = heading - bearing_ppc

    # normalize bearing difference to range between -180 and 180 degrees
    if bearing_diff < -180:
        bearing_diff = bearing_diff + 360

    if bearing_diff > 180:
        bearing_diff = bearing_diff - 360

    steer_output = 750 * np.arctan(-1 * 2 * 3.5 * np.sin(np.pi * bearing_diff / 180) / 8)
    
    return steer_output













#file_path = 'output.txt'
#waypoints = load_waypoints(file_path)
waypoints = [[17.601378371776082,78.12658284280296],
[17.601379089453523,78.12658285686763],
[17.601379571990606,78.12658286941766],
[17.601380787475527,78.12658288430558],
[17.60138151739007,78.12658290375005],
[17.601383228129876,78.12658293845469],
[17.60138420271959,78.1265829503898],
[17.601386414358714,78.12658297940635],
[17.601387633885434,78.12658299720565],
[17.60139035819312,78.12658298918466],
[17.60139183597416,78.1265829847566],
[17.601395048335934,78.12658297491106],
[17.601396769094045,78.12658298045314],
[17.601400469256422,78.12658296412708],
[17.601402421588592,78.12658296986119],
[17.601406487700203,78.12658294217073],
[17.60140861194345,78.12658291369658],
[17.601412953091405,78.12658291541155],
[17.60141522182291,78.12658295148323],
[17.60141988227403,78.12658300504118],
[17.601422281572994,78.12658298989373],
[17.60142722653896,78.12658295441516],
[17.60142973726089,78.12658291456168],
[17.60143491607242,78.12658292387549],
[17.601437534033646,78.12658294545068],
[17.60144291112895,78.12658299692816],
[17.601445663230557,78.12658301492792],
[17.601451046729128,78.12658292116876],
[17.60145365931468,78.12658286405878],
[17.601458891645663,78.12658287857725],
[17.601461480359568,78.12658291460463],
[17.60146664680145,78.12658289971402],
[17.60146924492128,78.12658293012484],
[17.601474625821172,78.12658287197542],
[17.6014773733994,78.12658286782565],
[17.601482921154755,78.12658282579912],
[17.601485713332295,78.12658277086717],
[17.601491421971375,78.12658279479791],
[17.60149428564677,78.12658279117196],
[17.601500177737545,78.12658278516038],
[17.60150319279325,78.12658272882666],
[17.601509301326626,78.12658268904711],
[17.60151240300029,78.1265826996212],
[17.60151868535132,78.12658272504788],
[17.60152186029063,78.1265826925652],
[17.601528187383114,78.12658268058648],
[17.601534436383407,78.12658268688705],
[17.601537566441444,78.12658267811942],
[17.60154387653515,78.12658264519074],
[17.601547071139446,78.12658265327511],
[17.60155353903209,78.1265826046562],
[17.601556792160448,78.12658249223729],
[17.601563456591915,78.12658248040213],
[17.601566850375704,78.1265824729242],
[17.601573639873024,78.12658244918694],
[17.601577086849787,78.12658243275467],
[17.601584029437834,78.12658239077396],
[17.601587540850403,78.12658235367283],
[17.601594580896336,78.12658236932377],
[17.601598158114356,78.1265823206948],
[17.60160175466431,78.12658228988133],
[17.60160903212636,78.12658219645196],
[17.601616399190267,78.126582068079],
[17.60162012257923,78.12658201072699],
[17.601627597419547,78.12658194321611],
[17.601631384877056,78.12658188630027],
[17.60163904605331,78.12658175177552],
[17.60164291104135,78.12658170412061],
[17.601650730964092,78.12658164203818],
[17.60165466668233,78.12658159338919],
[17.60166265666828,78.12658145949074],
[17.601666673101,78.12658140786743],
[17.60167475664998,78.12658125338484],
[17.601678840942196,78.12658120655797],
[17.60168702306472,78.12658104630545],
[17.601691151578112,78.12658094712351],
[17.601699415624555,78.1265807904553],
[17.60170358331703,78.12658071625167],
[17.601711939713326,78.12658050427825],
[17.601716134357623,78.12658039839746],
[17.60172459612156,78.12658018530657],
[17.60172883225299,78.12658004979068],
[17.601737283867656,78.1265798274235],
[17.601741545419152,78.12657969223548],
[17.6017500899234,78.12657939879205],
[17.601754330406255,78.126579269335],
[17.601762948123913,78.12657901498646],
[17.601767270957474,78.12657884651846],
[17.601775914342156,78.12657858002076],
[17.60178026955,78.12657843967867],
[17.60178903027533,78.12657814549982],
[17.601793411748197,78.12657797720321],
[17.60180222989881,78.1265776927846],
[17.601806651126587,78.12657753550792],
[17.60181551934287,78.12657719806533],
[17.601819970052194,78.12657705988558],
[17.601828897137274,78.12657677836731],
[17.601833394235314,78.12657664146164],
[17.60184244334616,78.12657633961935],
[17.601846989508722,78.12657623288355],
[17.601856225456224,78.12657587076598],
[17.601860800926595,78.12657572847552],
[17.60186995802184,78.12657549767005],
[17.60187454805016,78.12657538035751],
[17.601883763266606,78.12657509770632],
[17.601888352673388,78.12657499656258],
[17.601897706293776,78.12657470360676],
[17.601907008323888,78.1265744845903],
[17.60191167230256,78.1265743985257],
[17.601921010261144,78.1265741882607],
[17.60192573252522,78.12657408344123],
[17.601935101556542,78.12657393873569],
[17.601939733862736,78.1265738717215],
[17.601944335618487,78.12657376195301],
[17.601953305560507,78.12657357788275],
[17.601962116351764,78.12657344037981],
[17.60196650434394,78.12657335438259],
[17.60197518763396,78.12657327519631],
[17.601979534333744,78.12657322677958],
[17.60198819527414,78.12657312809645],
[17.601992526461792,78.12657311956035],
[17.60200125273094,78.1265730646],
[17.602005653807783,78.1265730462223],
[17.602014434821726,78.12657308377506],
[17.60201888070634,78.1265730883732],
[17.602027817140133,78.12657309208335],
[17.602032334733725,78.12657310697875],
[17.60204143805728,78.1265731084091],
[17.60204603793773,78.12657309618643],
[17.602055305047244,78.12657311194417],
[17.60205999904908,78.12657310985401],
[17.602069449879547,78.12657314786345],
[17.602074232559918,78.12657316847177],
[17.60208385630954,78.12657318263858],
[17.602088700310254,78.12657321786158],
[17.60209849840406,78.12657325436503],
[17.60210340974631,78.1265732321123],
[17.6021132720746,78.1265731990192],
[17.602118209490033,78.126573230361],
[17.602128177818496,78.12657324021806],
[17.60213316348814,78.12657323781053],
[17.60214315708012,78.12657327182941],
[17.602148168445165,78.12657327990136],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092],
[17.60215319876982,78.12657327972092]]

start_idx_to_shift = 49  # Change this to the desired index

shift_distance_meters = 3.5  # Change this to the desired shift distance in meters

shifted_waypoints = []

for i in range(len(waypoints) - 1):
    vector = calculate_vector(waypoints[i], waypoints[i + 1])
    normalized_vector = normalize_vector(vector)
    perpendicular = calculate_perpendicular(normalized_vector)

    if i >= start_idx_to_shift:
        # Shifting waypoints starting from the specified index by 4 meters perpendicular to the path
        shifted = shift_waypoint(waypoints[i], perpendicular, shift_distance_meters)
    else:
        shifted = waypoints[i]

    shifted_waypoints.append(shifted)

# Add the last waypoint
shifted_waypoints.append(waypoints[-1])








wp = 0
message = "A,N,0,0,0,0,0,0,0,0,0\r\n" 
obj.send_data(message)
feed = obj.receive_data()
print(feed)
message = "A,N,0,1,100,0,0,0,0,0,0\r\n"
obj.send_data(message)
time.sleep(1)
feed = obj.receive_data()
print(feed)
message = "A,D,0,0,0,0,0,0,0,0,0 \r\n"
obj.send_data(message)
feed = obj.receive_data()
print(feed)
while not rospy.is_shutdown():
    try:
        print("waypoint index =============== ",wp)
        position = [float(lat), float(lng)]
        print("Current position = ", position)
        if ((np.linalg.norm(np.array(position) - waypoints[len(shifted_waypoints) - 1]) * wp_threshold) > 1):
            steer_angle = calculate_steer_angle(position, wp, heading)
            print("Steer Angle: ",steer_angle)
            steering_feedback = obj.receive_data().split(',')[2]
            print("steer Feedback: ",steering_feedback)
            velocity_feedback= obj.receive_data().split(',')[3]
            print("\nvelocity_feedback: ",velocity_feedback)
            steer_rate = pid_controller.update(steer_angle, float(steering_feedback))
            print("Steer Rate: ",steer_rate)
            if int(velocity_feedback)< 10:
                obj.send_data("A,D,6,0,0,1,"+str(steer_rate)+",0,0,0,0\r\n")
            else:
                obj.send_data("A,D,0,1,30,1,"+str(steer_rate)+",0,0,0,0\r\n")   
            #time.sleep(1)
            if (wp < len(shifted_waypoints) and ((np.linalg.norm(np.array(position) - shifted_waypoints[wp]) * wp_threshold) < 6)):
                wp = wp + 1
                print("\n Waypoint Number : ",wp)
        else:
            steer_angle = 0
            obj.send_data('A,N,0,1,100,0,0,0,0,0,0\r\r')
            time.sleep(1)
        
        
    except rospy.ROSInterruptException:
        pass
